# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
name: release-please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write # needed if using builtin secrets.GITHUB_TOKEN


jobs:
  release-please:
    runs-on: windows-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: simple

      - uses: actions/checkout@v4

      - name: Validates apps.json
        shell: pwsh
        run: if (-not (Get-Content -Raw apps.json | Test-Json)) { exit 1 }

      - name: Restore Scoop cache
        if: steps.release.outputs.release_created
        uses: actions/cache/restore@v4
        with:
                path: build\scoop\cache
                key: scoop-cache-dummy # never used, only use restore-keys
                restore-keys: |
                              scoop-cache-

      # WARNING: scoop is added to the path only in that step
      - name: Build apps (local install)
        if: steps.release.outputs.release_created
        shell: pwsh
        run: |
             & .\build.ps1 apps.json

      # WARNING: use full path to scoop as PATH var has died in last step 
      # Generate hash from installed packages
      - name: Generate cache hash
        if: steps.release.outputs.release_created
        id: cache-hash
        shell: pwsh
        run: |
             build\scoop\shims\scoop list | Select-Object Name, Version > hash.txt 2>$null
             $hash = (Get-FileHash hash.txt -Algorithm SHA256).Hash.Substring(0, 8)
             echo "hash=$hash" >> $env:GITHUB_OUTPUT
             
      # Save cache with new hash
      - name: Save Scoop cache
        if: steps.release.outputs.release_created
        uses: actions/cache/save@v4
        with:
                path: build\scoop\cache
                key: scoop-cache-${{ steps.cache-hash.outputs.hash }}

      - name: Add install scripts,readme,licence and version to build
        if: steps.release.outputs.release_created
        shell: pwsh
        run: |
             cp install.ps1 build
             cp activate.ps1 build
             cp README.md build
             cp LICENSE build
             echo ${{steps.release.outputs.release_created}} > build/VERSION.txt

      # WARNING: use full path to scoop as PATH var has died in previous step
      # .git is renamed because of Compress-Archive builtin exclusion of .git and to avoid external dep on tar.exe or other...
      - name: Compress archive (cleaning cache and moving .git to .git-force)
        if: steps.release.outputs.release_created
        shell: pwsh
        run: |
             build\scoop\shims\scoop cache rm *
             Get-ChildItem -Path "build" -Recurse -Directory -Force -Filter ".git" | Rename-Item -NewName ".git-force"
             Compress-Archive build/* toolset.zip

      - name: Upload archive
        if: ${{steps.release.outputs.release_created}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release.outputs.tag_name }} toolset.zip

